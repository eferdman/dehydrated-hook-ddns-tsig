## configuration file for dehydrated's ddns-tsig hook
# location:
#  - $(pwd)/dehydrated-hook-ddns-tsig.conf
#  - /etc/dehydrated/dehydrated-hook-ddns-tsig.conf
#  - /usr/local/etc/dehydrated/dehydrated-hook-ddns-tsig.conf
#  OR provided via the '--config' cmdline flag

[DEFAULT]
## the nameserver that will serve the challenge
#name_server_ip = 10.0.0.1
## time-to-live for the challenge
#TTL = 300
## how long to wait to check whether the challenge is really served
#wait = 5
## verbosity of the script: use negative values to suppress more messages)
#verbosity = 0

### encryption key
##  you MUST have an encryption key to talk to a DNS-server.
##  if values are omitted from this config-file, they will instead be read
##  from the file specified in the DDNS_HOOK_KEY_FILE envvar.
## name of the key
key_name = testkey
## base64-encoded value of the key
key_secret = "R3HI8P6BKw9ZwXwN3VZKuQ=="
## key-algorithm to use (use, eg. `tsig-keygen' to easily generate a BIND9 hmac-sha256 key)
#key_algorithm = hmac-md5

## DNS record rewriting
## If you generally use static zone files, and only have dynamic DNS enabled
##   for a few other zones, you can setup a (static) CNAME record to point your
##   _acme-challenge record into a dynamic zone.
##   E.g. setting up a CNAME from _acme-challenge.domain.ext to
##   domain.ext.dynamiczone.otherdomain.ext.
##   This lets ACME check the challenge in a static zone, while only allowing
##   dehydrated to update the dynamic entry.
#dns_rewrite = s/^_acme-challenge\.(.+)$/\1.dynamiczone.otherdomain.ext/


## you can also call additional hook-scripts after each stage
## the configuration keys are 'post_<stagename>'
##   the arguments (and stagenames) are as documented for 'dehydrated' hooks
#post_deploy_cert = /script/to/dehydrated_hooks/deploy_cert.sh

###################################################
## you can override values for a given domain
#[example.com]
#name_server_ip = 127.0.0.1
#key_name = samplekey
#key_secret = 6FMfj43Osz4lyb24OIe2iGEz9lf1llJO+lz=
